## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file determineHoles.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_200 = Integer(200); _sage_const_202 = Integer(202); _sage_const_153 = Integer(153); _sage_const_179 = Integer(179); _sage_const_159 = Integer(159); _sage_const_210 = Integer(210); _sage_const_212 = Integer(212); _sage_const_190 = Integer(190); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_14 = Integer(14); _sage_const_52 = Integer(52); _sage_const_169 = Integer(169); _sage_const_161 = Integer(161)## This file (determineHoles.sagetex.sage) was *autogenerated* from determineHoles.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('determineHoles', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_52 
_st_.blockbegin()
try:
 R, x = QQ['x'].objgen()
 
 def maybeMakeNegative(natural):
     integer = natural*(-_sage_const_1 )**ZZ.random_element(_sage_const_2 )
     return integer
 
 def makeIntegerFactor():
     zero = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_6 ))
     integerFactor = x - zero
     return [integerFactor, zero]
 
 def makeRationalFactor():
     a = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_4 ))
     b = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_6 ))
     while gcd(abs(a), abs(b)) > _sage_const_1 :
         a = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_4 ))
         b = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_6 ))
     rationalFactor = a*x + b
     return [rationalFactor, -b/a]
 
 def makeIrrationalQuadratic():
     a = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_6 ))
     b = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_6 ))
     c = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_6 ))
     discrim = b**_sage_const_2  - _sage_const_4 *a*c
     integerType = type(_sage_const_2 )
     while type(sqrt(discrim)) == integerType:
         a = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_6 ))
         b = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_6 ))
         c = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_6 ))
         discrim = b**_sage_const_2  - _sage_const_4 *a*c
     solution0 = (-b + sqrt(discrim))/_sage_const_2 *a
     solution1 = (-b - sqrt(discrim))/_sage_const_2 *a
     smallerSolution, largerSolution = sorted([solution0, solution1])
     quadratic = a*x**_sage_const_2  + b*x + c
     return [quadratic, smallerSolution, largerSolution]
 
 def makeComplexQuadratic():
     a0 = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_4 ))
     b0 = maybeMakeNegative(ZZ.random_element(_sage_const_1 , _sage_const_6 ))
     complex0 = a0 + b0*i
     complex1 = a0 - b0*i
     quadratic = x**_sage_const_2  + (a0**_sage_const_2  + b0**_sage_const_2 )
     return [quadratic, complex0, complex1]
 ##########
 function1num, answer1 = makeIntegerFactor()
 function1denom = ZZ.random_element(_sage_const_2 , _sage_const_7 ) * function1num
 ###
 function2num = maybeMakeNegative(ZZ.random_element(_sage_const_2 , _sage_const_7 ))
 function2denom, answer2 = makeIntegerFactor()
 ###
 function3num = maybeMakeNegative(ZZ.random_element(_sage_const_2 , _sage_const_7 ))
 factor3denomA, answer3aTEMP = makeRationalFactor()
 factor3denomB, answer3bTEMP = makeRationalFactor()
 while answer3aTEMP == answer3bTEMP:
     factor3denomA, answer3aTEMP = makeRationalFactor()
     factor3denomB, answer3bTEMP = makeRationalFactor()
 function3denom = factor3denomA * factor3denomB
 answer3a, answer3b = sorted([answer3aTEMP, answer3bTEMP])
 ###
 factor4numA, deadValue4A = makeRationalFactor()
 factor4numB, deadValue4B = makeRationalFactor()
 factor4denomA, answer4aTEMP = makeRationalFactor()
 factor4denomB, answer4bTEMP = makeRationalFactor()
 factor4denomC, answer4cTEMP = makeIntegerFactor()
 while answer4aTEMP == answer4bTEMP or answer4aTEMP == answer4bTEMP or answer4bTEMP == answer4cTEMP or deadValue4A == answer4aTEMP or deadValue4A == answer4bTEMP or deadValue4A == answer4cTEMP or deadValue4B == answer4aTEMP or deadValue4B == answer4bTEMP or deadValue4B == answer4cTEMP or deadValue4A == deadValue4B:
     factor4numA, deadValue4A = makeRationalFactor()
     factor4numB, deadValue4B = makeRationalFactor()
     factor4denomA, answer4aTEMP = makeRationalFactor()
     factor4denomB, answer4bTEMP = makeRationalFactor()
     factor4denomC, answer4cTEMP = makeIntegerFactor()
 function4num = factor4numA * factor4numB
 function4denom = factor4denomA * factor4denomB * factor4denomC
 answer4a, answer4b, answer4c = sorted([answer4aTEMP, answer4bTEMP, answer4cTEMP])
 ###
 factor5numA, deadValue5A = makeRationalFactor()
 factor5numB, deadValue5B = makeRationalFactor()
 factor5denomA = factor5numA
 answer5aTEMP = deadValue5A
 factor5denomB, answer5bTEMP = makeRationalFactor()
 factor5denomC, answer5cTEMP = makeIntegerFactor()
 while answer5aTEMP == answer5bTEMP or answer5aTEMP == answer5bTEMP or answer5bTEMP == answer5cTEMP or deadValue5A == answer5bTEMP or deadValue5A == answer5cTEMP or deadValue5B == answer5aTEMP or deadValue5B == answer5bTEMP or deadValue5B == answer5cTEMP or deadValue5A == deadValue5B:
     factor5numA, deadValue5A = makeRationalFactor()
     factor5numB, deadValue5B = makeRationalFactor()
     factor5denomA = factor5numA
     answer5aTEMP = deadValue5A
     factor5denomB, answer5bTEMP = makeRationalFactor()
     factor5denomC, answer5cTEMP = makeIntegerFactor()
 function5num = factor5numA * factor5numB
 function5denom = factor5denomA * factor5denomB * factor5denomC
 answer5a = answer5aTEMP
 answer5b, answer5c = sorted([answer5bTEMP, answer5cTEMP])
 ###
 factor6numA, deadValue6A = makeIntegerFactor()
 factor6numB, deadValue6B = makeIntegerFactor()
 factor6denomA = factor6numA
 answer6 = deadValue6A
 complexQuadratic6, deadComplex6A, deadComplex6B = makeComplexQuadratic()
 function6num = factor6numA * factor6numB
 function6denom = factor6denomA * complexQuadratic6
except:
 _st_.goboom(_sage_const_153 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_159 
 _st_.inline(_sage_const_0 , latex(function1num))
except:
 _st_.goboom(_sage_const_159 )
try:
 _st_.current_tex_line = _sage_const_159 
 _st_.inline(_sage_const_1 , latex(function1denom))
except:
 _st_.goboom(_sage_const_159 )
try:
 _st_.current_tex_line = _sage_const_161 
 _st_.inline(_sage_const_2 , latex(answer1))
except:
 _st_.goboom(_sage_const_161 )
try:
 _st_.current_tex_line = _sage_const_169 
 _st_.inline(_sage_const_3 , latex(function2num))
except:
 _st_.goboom(_sage_const_169 )
try:
 _st_.current_tex_line = _sage_const_169 
 _st_.inline(_sage_const_4 , latex(function2denom))
except:
 _st_.goboom(_sage_const_169 )
try:
 _st_.current_tex_line = _sage_const_179 
 _st_.inline(_sage_const_5 , latex(function3num))
except:
 _st_.goboom(_sage_const_179 )
try:
 _st_.current_tex_line = _sage_const_179 
 _st_.inline(_sage_const_6 , latex(function3denom))
except:
 _st_.goboom(_sage_const_179 )
try:
 _st_.current_tex_line = _sage_const_190 
 _st_.inline(_sage_const_7 , latex(function4num))
except:
 _st_.goboom(_sage_const_190 )
try:
 _st_.current_tex_line = _sage_const_190 
 _st_.inline(_sage_const_8 , latex(function4denom))
except:
 _st_.goboom(_sage_const_190 )
try:
 _st_.current_tex_line = _sage_const_200 
 _st_.inline(_sage_const_9 , latex(function5num))
except:
 _st_.goboom(_sage_const_200 )
try:
 _st_.current_tex_line = _sage_const_200 
 _st_.inline(_sage_const_10 , latex(function5denom))
except:
 _st_.goboom(_sage_const_200 )
try:
 _st_.current_tex_line = _sage_const_202 
 _st_.inline(_sage_const_11 , latex(answer5a))
except:
 _st_.goboom(_sage_const_202 )
try:
 _st_.current_tex_line = _sage_const_210 
 _st_.inline(_sage_const_12 , latex(function6num))
except:
 _st_.goboom(_sage_const_210 )
try:
 _st_.current_tex_line = _sage_const_210 
 _st_.inline(_sage_const_13 , latex(function6denom))
except:
 _st_.goboom(_sage_const_210 )
try:
 _st_.current_tex_line = _sage_const_212 
 _st_.inline(_sage_const_14 , latex(answer6))
except:
 _st_.goboom(_sage_const_212 )
_st_.endofdoc()

