## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file solveRadicalLeadQuadraticEquation.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_41 = Integer(41); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_7 = Integer(7); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_143 = Integer(143); _sage_const_149 = Integer(149); _sage_const_151 = Integer(151); _sage_const_153 = Integer(153); _sage_const_163 = Integer(163); _sage_const_5 = Integer(5); _sage_const_165 = Integer(165); _sage_const_6 = Integer(6); _sage_const_176 = Integer(176); _sage_const_8 = Integer(8)## This file (solveRadicalLeadQuadraticEquation.sagetex.sage) was *autogenerated* from solveRadicalLeadQuadraticEquation.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('solveRadicalLeadQuadraticEquation', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_41 
_st_.blockbegin()
try:
 x = var('x')
 def generateCoefficients():
     a = (-_sage_const_1 )**ZZ.random_element(_sage_const_2 ) * (ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     b = (-_sage_const_1 )**ZZ.random_element(_sage_const_2 ) * (ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     c = (-_sage_const_1 )**ZZ.random_element(_sage_const_2 ) * (ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     d = (-_sage_const_1 )**ZZ.random_element(_sage_const_2 ) * (ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     discriminant = (a*c+b*d)**_sage_const_2  - _sage_const_4 *a*c*b*d
     while discriminant < _sage_const_0  or discriminant == _sage_const_0 :
         a = (-_sage_const_1 )**ZZ.random_element(_sage_const_2 ) * (ZZ.random_element(_sage_const_3 , _sage_const_7 ))
         b = (-_sage_const_1 )**ZZ.random_element(_sage_const_2 ) * (ZZ.random_element(_sage_const_3 , _sage_const_7 ))
         c = (-_sage_const_1 )**ZZ.random_element(_sage_const_2 ) * (ZZ.random_element(_sage_const_3 , _sage_const_7 ))
         d = (-_sage_const_1 )**ZZ.random_element(_sage_const_2 ) * (ZZ.random_element(_sage_const_3 , _sage_const_7 ))
         discriminant = (a*c+b*d)**_sage_const_2  - _sage_const_4 *a*c*b*d
     return [a, b, c, d]
 #
 def checkDomainOfTerms(a, b, c, d, solution):
     term1 = a*c*x**_sage_const_2  + b*d
     term2 = -(a*d+b*c)*x
     term1Check = term1(x=solution)
     term2Check = term2(x=solution)
     if term1Check > _sage_const_0  and term2Check > _sage_const_0 :
         inDomain = _sage_const_1 
     else:
         inDomain = _sage_const_0 
     return inDomain
 #
 def equationWithTwoSolutions():
     a, b, c, d = generateCoefficients()
     solution1 = -b/a
     solution2 = -d/c
     solution1inDomain = checkDomainOfTerms(a, b, c, d, solution1)
     solution2inDomain = checkDomainOfTerms(a, b, c, d, solution2)
     counter = _sage_const_0 
     while solution1inDomain == _sage_const_0  or solution2inDomain == _sage_const_0 :
         a, b, c, d = generateCoefficients()
         solution1 = -b/a
         solution2 = -d/c
         solution1inDomain = checkDomainOfTerms(a, b, c, d, solution1)
         solution2inDomain = checkDomainOfTerms(a, b, c, d, solution2)
         counter = counter + _sage_const_1 
     return [a, b, c, d]
 #
 def equationWithOneSolution():
     a, b, c, d = generateCoefficients()
     solution1 = -b/a
     solution2 = -d/c
     solution1inDomain = checkDomainOfTerms(a, b, c, d, solution1)
     solution2inDomain = checkDomainOfTerms(a, b, c, d, solution2)
     counter = _sage_const_0 
     while (solution1inDomain == _sage_const_0  and solution2inDomain == _sage_const_0 ) or (solution1inDomain == _sage_const_1  and solution2inDomain == _sage_const_1 ):
         a, b, c, d = generateCoefficients()
         solution1 = -b/a
         solution2 = -d/c
         solution1inDomain = checkDomainOfTerms(a, b, c, d, solution1)
         solution2inDomain = checkDomainOfTerms(a, b, c, d, solution2)
         counter = counter + _sage_const_1 
     if solution1inDomain == _sage_const_1 :
         return [a, b, c, d, round(solution1, _sage_const_3 )]
     else:
         return [a, b, c, d, round(solution2, _sage_const_3 )]
 #
 def equationWithZeroSolutions():
     a, b, c, d = generateCoefficients()
     solution1 = -b/a
     solution2 = -d/c
     solution1inDomain = checkDomainOfTerms(a, b, c, d, solution1)
     solution2inDomain = checkDomainOfTerms(a, b, c, d, solution2)
     counter = _sage_const_0 
     while solution1inDomain == _sage_const_1  or solution2inDomain == _sage_const_1 :
         a, b, c, d = generateCoefficients()
         solution1 = -b/a
         solution2 = -d/c
         solution1inDomain = checkDomainOfTerms(a, b, c, d, solution1)
         solution2inDomain = checkDomainOfTerms(a, b, c, d, solution2)
         counter = counter + _sage_const_1 
     return [a, b, c, d]
 #
 def orderSolutions(a, b, c, d):
     s1 = round(-b/a, _sage_const_3 )
     s2 = round(-d/c, _sage_const_3 )
     if (s1 < s2):
         return [s1, s2]
     else:
         return [s2, s1]
 ##### END OF DEFINITIONS #####
 
 ##### QUESTION 13 #####
 a13, b13, c13, d13 = equationWithTwoSolutions()
 termA13 = a13*c13*x**_sage_const_2  + b13*d13
 termB13 = -(a13*d13+b13*c13)*x
 solutionA13, solutionB13 = orderSolutions(a13, b13, c13, d13)
 
 ##### QUESTION 14 #####
 a14, b14, c14, d14, solution14 = equationWithOneSolution()
 termA14 = a14*c14*x**_sage_const_2  + b14*d14
 termB14 = -(a14*d14+b14*c14)*x
 
 ##### QUESTION 15 #####
 a15, b15, c15, d15 = equationWithZeroSolutions()
 termA15 = a15*c15*x**_sage_const_2  + b15*d15
 termB15 = -(a15*d15+b15*c15)*x
except:
 _st_.goboom(_sage_const_143 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_149 
 _st_.inline(_sage_const_0 , latex(termA13))
except:
 _st_.goboom(_sage_const_149 )
try:
 _st_.current_tex_line = _sage_const_149 
 _st_.inline(_sage_const_1 , latex(termB13))
except:
 _st_.goboom(_sage_const_149 )
try:
 _st_.current_tex_line = _sage_const_151 
 _st_.inline(_sage_const_2 , latex(solutionA13))
except:
 _st_.goboom(_sage_const_151 )
try:
 _st_.current_tex_line = _sage_const_153 
 _st_.inline(_sage_const_3 , latex(solutionB13))
except:
 _st_.goboom(_sage_const_153 )
try:
 _st_.current_tex_line = _sage_const_163 
 _st_.inline(_sage_const_4 , latex(termA14))
except:
 _st_.goboom(_sage_const_163 )
try:
 _st_.current_tex_line = _sage_const_163 
 _st_.inline(_sage_const_5 , latex(termB14))
except:
 _st_.goboom(_sage_const_163 )
try:
 _st_.current_tex_line = _sage_const_165 
 _st_.inline(_sage_const_6 , latex(solution14))
except:
 _st_.goboom(_sage_const_165 )
try:
 _st_.current_tex_line = _sage_const_176 
 _st_.inline(_sage_const_7 , latex(termA15))
except:
 _st_.goboom(_sage_const_176 )
try:
 _st_.current_tex_line = _sage_const_176 
 _st_.inline(_sage_const_8 , latex(termB15))
except:
 _st_.goboom(_sage_const_176 )
_st_.endofdoc()

