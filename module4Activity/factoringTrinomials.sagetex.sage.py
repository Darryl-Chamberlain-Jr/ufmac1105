## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file factoringTrinomials.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_30 = Integer(30); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_14 = Integer(14); _sage_const_0 = Integer(0); _sage_const_62 = Integer(62); _sage_const_68 = Integer(68); _sage_const_70 = Integer(70); _sage_const_78 = Integer(78); _sage_const_3 = Integer(3); _sage_const_80 = Integer(80); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_88 = Integer(88); _sage_const_9 = Integer(9); _sage_const_121 = Integer(121); _sage_const_127 = Integer(127); _sage_const_6 = Integer(6); _sage_const_129 = Integer(129); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8); _sage_const_136 = Integer(136); _sage_const_138 = Integer(138); _sage_const_10 = Integer(10); _sage_const_11 = Integer(11); _sage_const_143 = Integer(143); _sage_const_195 = Integer(195); _sage_const_200 = Integer(200); _sage_const_12 = Integer(12); _sage_const_202 = Integer(202); _sage_const_13 = Integer(13); _sage_const_209 = Integer(209); _sage_const_15 = Integer(15); _sage_const_211 = Integer(211); _sage_const_16 = Integer(16); _sage_const_17 = Integer(17); _sage_const_217 = Integer(217); _sage_const_290 = Integer(290); _sage_const_295 = Integer(295); _sage_const_18 = Integer(18); _sage_const_297 = Integer(297); _sage_const_19 = Integer(19); _sage_const_20 = Integer(20); _sage_const_304 = Integer(304); _sage_const_21 = Integer(21); _sage_const_306 = Integer(306); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_313 = Integer(313); _sage_const_24 = Integer(24); _sage_const_315 = Integer(315); _sage_const_25 = Integer(25); _sage_const_26 = Integer(26)## This file (factoringTrinomials.sagetex.sage) was *autogenerated* from factoringTrinomials.tex with sagetex.sty version 2019/11/14 v3.4.
import sagetex
_st_ = sagetex.SageTeXProcessor('factoringTrinomials', version='2019/11/14 v3.4', version_check=True)
_st_.current_tex_line = _sage_const_30 
_st_.blockbegin()
try:
 x = var("x")
 #################
 def maybeMakeNegative(rational):
     maybeNegative = (-_sage_const_1 )**ZZ.random_element(_sage_const_1 )
     rational = maybeNegative * rational
     return rational
 def generateNumber(maxRange):
     number = _sage_const_2 *(ZZ.random_element(maxRange-_sage_const_2 )+_sage_const_2 )
     return number
 def createZeros(maxRange):
     c = maybeMakeNegative(generateNumber(maxRange))
     d = maybeMakeNegative(generateNumber(maxRange))
     while (c==-d or c==d):
         c = maybeMakeNegative(generateNumber(maxRange))
         d = maybeMakeNegative(generateNumber(maxRange))
     if (c < d or c==d):
         return [c, d]
     else:
         return [d, c]
 ##### END OF DEFINTIONS #####
 
 ###### QUESTION 4 #######
 zeros4 = createZeros(_sage_const_14 )
 quadratic4 = x**_sage_const_2  + (zeros4[_sage_const_0 ] + zeros4[_sage_const_1 ]) * x + zeros4[_sage_const_0 ]*zeros4[_sage_const_1 ]
 factor4A = x+zeros4[_sage_const_0 ]
 factor4B = x+zeros4[_sage_const_1 ]
 ###### QUESTION 5 #######
 zeros5 = createZeros(_sage_const_14 )
 quadratic5 = x**_sage_const_2  + (zeros5[_sage_const_0 ] + zeros5[_sage_const_1 ]) * x + zeros5[_sage_const_0 ]*zeros5[_sage_const_1 ]
 factor5A = x+zeros5[_sage_const_0 ]
 factor5B = x+zeros5[_sage_const_1 ]
except:
 _st_.goboom(_sage_const_62 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_68 
 _st_.inline(_sage_const_0 , latex(quadratic4))
except:
 _st_.goboom(_sage_const_68 )
try:
 _st_.current_tex_line = _sage_const_70 
 _st_.inline(_sage_const_1 , latex(factor4A))
except:
 _st_.goboom(_sage_const_70 )
try:
 _st_.current_tex_line = _sage_const_70 
 _st_.inline(_sage_const_2 , latex(factor4B))
except:
 _st_.goboom(_sage_const_70 )
try:
 _st_.current_tex_line = _sage_const_78 
 _st_.inline(_sage_const_3 , latex(quadratic5))
except:
 _st_.goboom(_sage_const_78 )
try:
 _st_.current_tex_line = _sage_const_80 
 _st_.inline(_sage_const_4 , latex(factor5A))
except:
 _st_.goboom(_sage_const_80 )
try:
 _st_.current_tex_line = _sage_const_80 
 _st_.inline(_sage_const_5 , latex(factor5B))
except:
 _st_.goboom(_sage_const_80 )
_st_.current_tex_line = _sage_const_88 
_st_.blockbegin()
try:
 x = var("x")
 import random
 import math
 
 #######################
 def maybeMakeNegative(rational):
     maybeNegative = (-_sage_const_1 )**ZZ.random_element(_sage_const_1 )
     rational = maybeNegative * rational
     return rational
 
 def generateZeros(minimum, maximum):
     a = ZZ.random_element(maximum-minimum)+minimum
     b = maybeMakeNegative(ZZ.random_element(maximum-minimum)+minimum)
     while gcd(abs(a), abs(b)) > _sage_const_1 :
         a = ZZ.random_element(maximum-minimum)+minimum
         b = maybeMakeNegative(ZZ.random_element(maximum-minimum)+minimum)
     return [a, -b]
 
 ########## END OF DEFINITIONS #############
 
 ##### QUESTION 6 ######
 zeros6 = generateZeros(_sage_const_3 , _sage_const_9 )
 quadratic6 = zeros6[_sage_const_0 ]**_sage_const_2  * x**_sage_const_2  - zeros6[_sage_const_1 ]**_sage_const_2 
 factor6A = zeros6[_sage_const_0 ]*x-abs(zeros6[_sage_const_1 ])
 factor6B = zeros6[_sage_const_0 ]*x+abs(zeros6[_sage_const_1 ])
 
 ##### QUESTION 7 ######
 zeros7 = generateZeros(_sage_const_3 , _sage_const_9 )
 quadratic7 = zeros7[_sage_const_0 ]**_sage_const_2  * x**_sage_const_2  - zeros7[_sage_const_1 ]**_sage_const_2 
 factor7A = zeros7[_sage_const_0 ]*x-abs(zeros7[_sage_const_1 ])
 factor7B = zeros7[_sage_const_0 ]*x+abs(zeros7[_sage_const_1 ])
 
except:
 _st_.goboom(_sage_const_121 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_127 
 _st_.inline(_sage_const_6 , latex(quadratic6))
except:
 _st_.goboom(_sage_const_127 )
try:
 _st_.current_tex_line = _sage_const_129 
 _st_.inline(_sage_const_7 , latex(factor6A))
except:
 _st_.goboom(_sage_const_129 )
try:
 _st_.current_tex_line = _sage_const_129 
 _st_.inline(_sage_const_8 , latex(factor6B))
except:
 _st_.goboom(_sage_const_129 )
try:
 _st_.current_tex_line = _sage_const_136 
 _st_.inline(_sage_const_9 , latex(quadratic7))
except:
 _st_.goboom(_sage_const_136 )
try:
 _st_.current_tex_line = _sage_const_138 
 _st_.inline(_sage_const_10 , latex(factor7A))
except:
 _st_.goboom(_sage_const_138 )
try:
 _st_.current_tex_line = _sage_const_138 
 _st_.inline(_sage_const_11 , latex(factor7B))
except:
 _st_.goboom(_sage_const_138 )
_st_.current_tex_line = _sage_const_143 
_st_.blockbegin()
try:
 x = var("x")
 import random
 import math
 
 ##################
 def maybeMakeNegative(rational):
     maybeNegative = (-_sage_const_1 )**ZZ.random_element(_sage_const_1 )
     rational = maybeNegative * rational
     return rational
 
 def generateSolution(minimum, maximum):
     listPrimes = prime_range(minimum, maximum)
     a, c = random.sample(listPrimes, _sage_const_2 )
     #
     b = maybeMakeNegative(randint(minimum, maximum))
     d = maybeMakeNegative(randint(minimum, maximum))
     # This makes sure we can't factor out a constant.
     while (gcd(a, b)*gcd(c, d)>_sage_const_1 ):
         a, c = random.sample(listPrimes, _sage_const_2 )
         b = maybeMakeNegative(randint(minimum, maximum))
         d = maybeMakeNegative(randint(minimum, maximum))
     #This will guarantee that we always generate solutions with b < = d#
     if(b < d or b == d):
         return [Integer(a), Integer(b), Integer(c), Integer(d)]
     else:
         return[Integer(c), Integer(d), Integer(a), Integer(b)]
 
 def generateProblem(solution):
     a, b, c, d = solution
     coeffA = Integer(a*c)
     coeffB = Integer(a*d+b*c)
     coeffC = Integer(b*d)
     return [coeffA, coeffB, coeffC]
 
 ######### END OF DEFINITIONS #########
 minimum = _sage_const_3 
 maximum = _sage_const_10 
 
 ##### QUESTION 8 #####
 coefficients8 = generateSolution(minimum, maximum)
 a8, b8, c8 = generateProblem(coefficients8)
 quadratic8 = a8 * x**_sage_const_2  + b8 * x + c8
 factor8A = coefficients8[_sage_const_0 ]*x+coefficients8[_sage_const_1 ]
 factor8B = coefficients8[_sage_const_2 ]*x+coefficients8[_sage_const_3 ]
 
 ##### QUESTION 9 #####
 coefficients9 = generateSolution(minimum, maximum)
 a9, b9, c9 = generateProblem(coefficients9)
 quadratic9 = a9 * x**_sage_const_2  + b9 * x + c9
 factor9A = coefficients9[_sage_const_0 ]*x+coefficients9[_sage_const_1 ]
 factor9B = coefficients9[_sage_const_2 ]*x+coefficients9[_sage_const_3 ]
except:
 _st_.goboom(_sage_const_195 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_200 
 _st_.inline(_sage_const_12 , latex(quadratic8))
except:
 _st_.goboom(_sage_const_200 )
try:
 _st_.current_tex_line = _sage_const_202 
 _st_.inline(_sage_const_13 , latex(factor8A))
except:
 _st_.goboom(_sage_const_202 )
try:
 _st_.current_tex_line = _sage_const_202 
 _st_.inline(_sage_const_14 , latex(factor8B))
except:
 _st_.goboom(_sage_const_202 )
try:
 _st_.current_tex_line = _sage_const_209 
 _st_.inline(_sage_const_15 , latex(quadratic9))
except:
 _st_.goboom(_sage_const_209 )
try:
 _st_.current_tex_line = _sage_const_211 
 _st_.inline(_sage_const_16 , latex(factor9A))
except:
 _st_.goboom(_sage_const_211 )
try:
 _st_.current_tex_line = _sage_const_211 
 _st_.inline(_sage_const_17 , latex(factor9B))
except:
 _st_.goboom(_sage_const_211 )
_st_.current_tex_line = _sage_const_217 
_st_.blockbegin()
try:
 x = var("x")
 import numpy
 import random
 
 ##################
 def maybeMakeNegative(rational):
     maybeNegative = (-_sage_const_1 )**(randint(_sage_const_0 , _sage_const_1 ))
     rational = maybeNegative * rational
     return rational
 
 def generateFactors(minimumPrime, maximumPrime, numberOfFactors):
     listPrimes = prime_range(minimum, maximum)
     aFactors = [random.sample(listPrimes, _sage_const_1 ) for i in range(numberOfFactors)]
     cFactors = [random.sample(listPrimes, _sage_const_1 ) for i in range(numberOfFactors)]
     return [aFactors, cFactors]
 
 def generateSolution(minimum, maximum, factors):
     aFactors = factors[_sage_const_0 ]
     cFactors = factors[_sage_const_1 ]
     a = numpy.prod(aFactors)
     c = numpy.prod(cFactors)
     b = maybeMakeNegative(randint(minimum, maximum))
     d = maybeMakeNegative(randint(minimum, maximum))
     # This makes sure we can't factor out a constant.
     while ((gcd(a, b)*gcd(c, d)>_sage_const_1 ) or (a==c and b==-d)):
         aFactors = factors[_sage_const_0 ]
         cFactors = factors[_sage_const_1 ]
         a = numpy.prod(aFactors)
         c = numpy.prod(cFactors)
         b = maybeMakeNegative(randint(minimum, maximum))
         d = maybeMakeNegative(randint(minimum, maximum))
     #This will guarantee that we always generate solutions with b < = d
     if(b < d or b==d):
         return [Integer(a), Integer(b), Integer(c), Integer(d)]
     else:
         return[Integer(c), Integer(d), Integer(a), Integer(b)]
 
 def generateProblem(solution):
     a, b, c, d = solution
     coeffA = Integer(a*c)
     coeffB = Integer(a*d+b*c)
     coeffC = Integer(b*d)
     return [coeffA, coeffB, coeffC]
 
 ######### END OF DEFINITIONS #########
 minimum = _sage_const_2 
 maximum = _sage_const_7 
 numberOfFactors = _sage_const_2 
 
 ##### QUESTION 10 #####
 factors10 = generateFactors(minimum, maximum, numberOfFactors)
 solution10 = generateSolution(minimum, maximum, factors10)
 coefficients10 = generateProblem(solution10)
 quadratic10 = coefficients10[_sage_const_0 ] * x**_sage_const_2  + coefficients10[_sage_const_1 ] * x + coefficients10[_sage_const_2 ]
 factor10A = solution10[_sage_const_0 ]*x + solution10[_sage_const_1 ]
 factor10B = solution10[_sage_const_2 ]*x + solution10[_sage_const_3 ]
 
 ##### QUESTION 11 #####
 factors11 = generateFactors(minimum, maximum, numberOfFactors)
 solution11 = generateSolution(minimum, maximum, factors11)
 coefficients11 = generateProblem(solution11)
 quadratic11 = coefficients11[_sage_const_0 ] * x**_sage_const_2  + coefficients11[_sage_const_1 ] * x + coefficients11[_sage_const_2 ]
 factor11A = solution11[_sage_const_0 ]*x + solution11[_sage_const_1 ]
 factor11B = solution11[_sage_const_2 ]*x + solution11[_sage_const_3 ]
 
 ##### QUESTION 12 #####
 factors12 = generateFactors(minimum, maximum, numberOfFactors)
 solution12 = generateSolution(minimum, maximum, factors12)
 coefficients12 = generateProblem(solution12)
 quadratic12 = coefficients12[_sage_const_0 ] * x**_sage_const_2  + coefficients12[_sage_const_1 ] * x + coefficients12[_sage_const_2 ]
 factor12A = solution12[_sage_const_0 ]*x + solution12[_sage_const_1 ]
 factor12B = solution12[_sage_const_2 ]*x + solution12[_sage_const_3 ]
except:
 _st_.goboom(_sage_const_290 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_295 
 _st_.inline(_sage_const_18 , latex(quadratic10))
except:
 _st_.goboom(_sage_const_295 )
try:
 _st_.current_tex_line = _sage_const_297 
 _st_.inline(_sage_const_19 , latex(factor10A))
except:
 _st_.goboom(_sage_const_297 )
try:
 _st_.current_tex_line = _sage_const_297 
 _st_.inline(_sage_const_20 , latex(factor10B))
except:
 _st_.goboom(_sage_const_297 )
try:
 _st_.current_tex_line = _sage_const_304 
 _st_.inline(_sage_const_21 , latex(quadratic11))
except:
 _st_.goboom(_sage_const_304 )
try:
 _st_.current_tex_line = _sage_const_306 
 _st_.inline(_sage_const_22 , latex(factor11A))
except:
 _st_.goboom(_sage_const_306 )
try:
 _st_.current_tex_line = _sage_const_306 
 _st_.inline(_sage_const_23 , latex(factor11B))
except:
 _st_.goboom(_sage_const_306 )
try:
 _st_.current_tex_line = _sage_const_313 
 _st_.inline(_sage_const_24 , latex(quadratic12))
except:
 _st_.goboom(_sage_const_313 )
try:
 _st_.current_tex_line = _sage_const_315 
 _st_.inline(_sage_const_25 , latex(factor12A))
except:
 _st_.goboom(_sage_const_315 )
try:
 _st_.current_tex_line = _sage_const_315 
 _st_.inline(_sage_const_26 , latex(factor12B))
except:
 _st_.goboom(_sage_const_315 )
_st_.endofdoc()

