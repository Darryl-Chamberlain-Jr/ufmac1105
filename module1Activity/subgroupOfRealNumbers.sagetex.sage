## -*- encoding: utf-8 -*-
## This file (subgroupOfRealNumbers.sagetex.sage) was *autogenerated* from subgroupOfRealNumbers.tex with sagetex.sty version 2019/11/14 v3.4.
import sagetex
_st_ = sagetex.SageTeXProcessor('subgroupOfRealNumbers', version='2019/11/14 v3.4', version_check=True)
_st_.current_tex_line = 172
_st_.blockbegin()
try:
 def generateNatural():
 denominator = ZZ.random_element(15)+1
 numerator = denominator*(ZZ.random_element(15)+1)
 negOrNo = ""
 displayProblem = [numerator**2, denominator**2, negOrNo]
 return displayProblem
 def generateWhole():
 denomBefore = ZZ.random_element(15)+1
 numerator = 0
 negOrNo = ""
 maybeComplexDisplayed = sample([1, 0], 1)
 if maybeComplexDisplayed == 1:
         denominator = latex(denomBefore*pi)
 else:
         denominator = denomBefore
 displayProblem = [numerator**2, denominator**2, negOrNo]
 return displayProblem
 def generateInteger():
     denominator = ZZ.random_element(15)+1
 numerator = denominator*(ZZ.random_element(15)+1)
 negOrNo = "-"
 displayProblem = [numerator**2, denominator**2, negOrNo]
 return displayProblem
 def generateRational():
 numeratorBefore = ZZ.random_element(15)+7
 denominatorBefore = ZZ.random_element(15)+7
 negative = ZZ.random_element(2)
 if negative == 0:
     negOrNo = ""
 else:
     negOrNo = "-"
 counter = 0
 while gcd(numeratorBefore, denominatorBefore) >= min(numeratorBefore, denominatorBefore):
     numerator = ZZ.random_element(15)+7
     denominator = ZZ.random_element(15)+7
     counter = counter + 1
 numerator = numeratorBefore**2
 denominator = denominatorBefore**2
 displayProblem = [numerator, denominator, negOrNo]
 return displayProblem
 def generateIrrational():
 numeratorBefore = ZZ.random_element(15)+1
 denominatorBefore = ZZ.random_element(15)+1
 negative = ZZ.random_element(2)
 if negative == 0:
     negOrNo = ""
 else:
     negOrNo = "-"
 integerType = type(sqrt(4))
 while type(sqrt(numeratorBefore/denominatorBefore)) == integerType:
     numeratorBefore = ZZ.random_element(15)+1
     denominatorBefore = ZZ.random_element(15)+1
 numerator = numeratorBefore
 denominator = denominatorBefore
 displayProblem = [numerator, denominator, negOrNo]
 return displayProblem
 def generateNotReal():
 numeratorBefore = ZZ.random_element(15)+1
 denominatorBefore = ZZ.random_element(15)+1
 negative = ZZ.random_element(2)
 if negative == 0:
     negOrNo = ""
 else:
     negOrNo = "-"
 complexOrNotNumber = sample([0, 1, 2], 1)[0]
 if complexOrNotNumber==0:
     numerator = -numeratorBefore*pi
     denominator = denominatorBefore
 elif complexOrNotNumber==1:
     numerator = -numeratorBefore
     denominator = denominatorBefore*pi
 else:
     topOrBottom = ZZ.random_element(2)
     if topOrBottom==0:
         numerator = -numeratorBefore
         denominator = 0
     else:
         numerator = -numeratorBefore * pi
         denominator = 0
 displayProblem = [numerator, denominator, negOrNo]
 return displayProblem
 def generateDisplay(answer):
 if answer == 0:
     numerator, denominator, negOrNo = generateNatural()
 elif answer == 1:
     numerator, denominator, negOrNo = generateWhole()
 elif answer == 2:
     numerator, denominator, negOrNo = generateInteger()
 elif answer == 3:
     numerator, denominator, negOrNo = generateRational()
 elif answer == 4:
     numerator, denominator, negOrNo = generateIrrational()
 elif answer == 5:
     numerator, denominator, negOrNo = generateNotReal()
 else:
     numerator, denominator, negOrNo = [0, 0, 0]
 return [numerator, denominator, negOrNo]
 ############ END OF DEFINITIONS ###############
 listOptions=[0, 1, 2, 3, 4, 5]
 ###### QUESTION 1 #########
 answer1 = sample(listOptions, 1)[0]
 numerator1, denominator1, negOrNo1 = generateDisplay(answer1)
 ###### QUESTION 2 #########
 answer2 = sample(listOptions, 1)[0]
 numerator2, denominator2, negOrNo2 = generateDisplay(answer2)
 ###### QUESTION 3 #########
 answer3 = sample(listOptions, 1)[0]
 numerator3, denominator3, negOrNo3 = generateDisplay(answer3)
except:
 _st_.goboom(281)
_st_.blockend()
try:
 _st_.current_tex_line = 286
 _st_.inline(0, latex(negOrNo1))
except:
 _st_.goboom(286)
try:
 _st_.current_tex_line = 286
 _st_.inline(1, latex(numerator1))
except:
 _st_.goboom(286)
try:
 _st_.current_tex_line = 286
 _st_.inline(2, latex(denominator1))
except:
 _st_.goboom(286)
try:
 _st_.current_tex_line = 297
 _st_.inline(3, latex(answer1))
except:
 _st_.goboom(297)
try:
 _st_.current_tex_line = 305
 _st_.inline(4, latex(negOrNo2))
except:
 _st_.goboom(305)
try:
 _st_.current_tex_line = 305
 _st_.inline(5, latex(numerator2))
except:
 _st_.goboom(305)
try:
 _st_.current_tex_line = 305
 _st_.inline(6, latex(denominator2))
except:
 _st_.goboom(305)
try:
 _st_.current_tex_line = 316
 _st_.inline(7, latex(answer2))
except:
 _st_.goboom(316)
try:
 _st_.current_tex_line = 323
 _st_.inline(8, latex(negOrNo3))
except:
 _st_.goboom(323)
try:
 _st_.current_tex_line = 323
 _st_.inline(9, latex(numerator3))
except:
 _st_.goboom(323)
try:
 _st_.current_tex_line = 323
 _st_.inline(10, latex(denominator3))
except:
 _st_.goboom(323)
try:
 _st_.current_tex_line = 334
 _st_.inline(11, latex(answer3))
except:
 _st_.goboom(334)
_st_.endofdoc()
