## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file subgroupOfComplexNumbers.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_138 = Integer(138); _sage_const_15 = Integer(15); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_214 = Integer(214); _sage_const_217 = Integer(217); _sage_const_227 = Integer(227); _sage_const_234 = Integer(234); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_244 = Integer(244); _sage_const_7 = Integer(7); _sage_const_251 = Integer(251); _sage_const_8 = Integer(8); _sage_const_9 = Integer(9); _sage_const_10 = Integer(10); _sage_const_261 = Integer(261); _sage_const_11 = Integer(11)## This file (subgroupOfComplexNumbers.sagetex.sage) was *autogenerated* from subgroupOfComplexNumbers.tex with sagetex.sty version 2019/01/09 v3.2.
import sagetex
_st_ = sagetex.SageTeXProcessor('subgroupOfComplexNumbers', version='2019/01/09 v3.2', version_check=True)
_st_.current_tex_line = _sage_const_138 
_st_.blockbegin()
try:
 # THIS code generates random Complex number. Options:
     # Rational
     # Irrational
     # Nonreal Complex
     # Pure Imaginary
     # Not a Complex number
 
 def generateRational():
     numerator = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*(-_sage_const_1 )**(ZZ.random_element(_sage_const_2 ))
     denominator = ZZ.random_element(_sage_const_15 )+_sage_const_2 
     i = var('i')
     complexPart = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*i**_sage_const_2 
     displayProblem = [numerator, denominator, complexPart]
     return displayProblem
 
 def generateIrrational():
     numerator = (ZZ.random_element(_sage_const_2 , _sage_const_15 ))*(-_sage_const_1 )**(ZZ.random_element(_sage_const_2 ))
     denominator = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*pi
     i = var('i')
     complexPart = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*i**_sage_const_2 
     displayProblem = [numerator, denominator, complexPart]
     return displayProblem
 
 def generateNonRealComplex():
     numerator = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*(-_sage_const_1 )**(ZZ.random_element(_sage_const_2 ))
     denominator = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*pi
     i = var('i')
     complexPart = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*i
     displayProblem = [numerator, denominator, complexPart]
     return displayProblem
 
 def generatePureImaginary():
     numerator = _sage_const_0 
     denominator = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*pi
     i = var('i')
     complexPart = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*i
     displayProblem = [numerator, denominator, complexPart]
     return displayProblem
 
 def generateNotComplex():
     numerator = pi*(ZZ.random_element(_sage_const_15 )+_sage_const_2 )*(-_sage_const_1 )**(ZZ.random_element(_sage_const_2 ))
     denominator = _sage_const_0 
     i = var('i')
     complexPart = (ZZ.random_element(_sage_const_15 )+_sage_const_2 )*i
     displayProblem = [numerator, denominator, complexPart]
     return displayProblem
 
 def generateDisplay(answer):
     if answer == _sage_const_0 :
         numerator, denominator, complexPart = generateRational()
     elif answer == _sage_const_1 :
         numerator, denominator, complexPart = generateIrrational()
     elif answer == _sage_const_2 :
         numerator, denominator, complexPart = generateNonRealComplex()
     elif answer == _sage_const_3 :
         numerator, denominator, complexPart = generatePureImaginary()
     else:
         numerator, denominator, complexPart = generateNotComplex()
     return [numerator, denominator, complexPart]
 
 ############# END OF DEFINITIONS ###############
 
 listOptions = [_sage_const_0 , _sage_const_1 , _sage_const_2 , _sage_const_3 , _sage_const_4 ]
 
 ########## QUESTION 4 #############
 answer4 = sample(listOptions, _sage_const_1 )[_sage_const_0 ]
 numerator4, denominator4, complexPart4 = generateDisplay(answer4)
 
 ########## QUESTION 5 #############
 answer5 = sample(listOptions, _sage_const_1 )[_sage_const_0 ]
 numerator5, denominator5, complexPart5 = generateDisplay(answer5)
 
 ########## QUESTION 6 #############
 answer6 = sample(listOptions, _sage_const_1 )[_sage_const_0 ]
 numerator6, denominator6, complexPart6 = generateDisplay(answer6)
except:
 _st_.goboom(_sage_const_214 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_217 
 _st_.inline(_sage_const_0 , latex(numerator4))
except:
 _st_.goboom(_sage_const_217 )
try:
 _st_.current_tex_line = _sage_const_217 
 _st_.inline(_sage_const_1 , latex(denominator4))
except:
 _st_.goboom(_sage_const_217 )
try:
 _st_.current_tex_line = _sage_const_217 
 _st_.inline(_sage_const_2 , latex(complexPart4))
except:
 _st_.goboom(_sage_const_217 )
try:
 _st_.current_tex_line = _sage_const_227 
 _st_.inline(_sage_const_3 , latex(answer4))
except:
 _st_.goboom(_sage_const_227 )
try:
 _st_.current_tex_line = _sage_const_234 
 _st_.inline(_sage_const_4 , latex(numerator5))
except:
 _st_.goboom(_sage_const_234 )
try:
 _st_.current_tex_line = _sage_const_234 
 _st_.inline(_sage_const_5 , latex(denominator5))
except:
 _st_.goboom(_sage_const_234 )
try:
 _st_.current_tex_line = _sage_const_234 
 _st_.inline(_sage_const_6 , latex(complexPart5))
except:
 _st_.goboom(_sage_const_234 )
try:
 _st_.current_tex_line = _sage_const_244 
 _st_.inline(_sage_const_7 , latex(answer5))
except:
 _st_.goboom(_sage_const_244 )
try:
 _st_.current_tex_line = _sage_const_251 
 _st_.inline(_sage_const_8 , latex(numerator6))
except:
 _st_.goboom(_sage_const_251 )
try:
 _st_.current_tex_line = _sage_const_251 
 _st_.inline(_sage_const_9 , latex(denominator6))
except:
 _st_.goboom(_sage_const_251 )
try:
 _st_.current_tex_line = _sage_const_251 
 _st_.inline(_sage_const_10 , latex(complexPart6))
except:
 _st_.goboom(_sage_const_251 )
try:
 _st_.current_tex_line = _sage_const_261 
 _st_.inline(_sage_const_11 , latex(answer6))
except:
 _st_.goboom(_sage_const_261 )
_st_.endofdoc()

