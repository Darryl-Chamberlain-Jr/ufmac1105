## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file subgroupOfRealNumbers.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_172 = Integer(172); _sage_const_15 = Integer(15); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_303 = Integer(303); _sage_const_308 = Integer(308); _sage_const_319 = Integer(319); _sage_const_327 = Integer(327); _sage_const_6 = Integer(6); _sage_const_338 = Integer(338); _sage_const_345 = Integer(345); _sage_const_8 = Integer(8); _sage_const_9 = Integer(9); _sage_const_10 = Integer(10); _sage_const_356 = Integer(356); _sage_const_11 = Integer(11)## This file (subgroupOfRealNumbers.sagetex.sage) was *autogenerated* from subgroupOfRealNumbers.tex with sagetex.sty version 2019/11/14 v3.4.
import sagetex
_st_ = sagetex.SageTeXProcessor('subgroupOfRealNumbers', version='2019/11/14 v3.4', version_check=True)
_st_.current_tex_line = _sage_const_172 
_st_.blockbegin()
try:
 # THIS code generates a random Real Number. Options:
 # Natural
 # Whole
 # Integer
 # Rational
 # Irrational
 # Not a Real number
 # Complex
 # Dividing by zero
 
 def generateNatural():
     denominator = ZZ.random_element(_sage_const_15 )+_sage_const_1 
     numerator = denominator*(ZZ.random_element(_sage_const_15 )+_sage_const_1 )
     negOrNo = ""
     displayProblem = [numerator**_sage_const_2 , denominator**_sage_const_2 , negOrNo]
     return displayProblem
 
 def generateWhole():
     denomBefore = ZZ.random_element(_sage_const_15 )+_sage_const_1 
     numerator = _sage_const_0 
     negOrNo = ""
     maybeComplexDisplayed = sample([_sage_const_1 , _sage_const_0 ], _sage_const_1 )
     if maybeComplexDisplayed == _sage_const_1 :
         denominator = latex(denomBefore*pi)
     else:
         denominator = denomBefore
     displayProblem = [numerator**_sage_const_2 , denominator**_sage_const_2 , negOrNo]
     return displayProblem
 
 def generateInteger():
     denominator = ZZ.random_element(_sage_const_15 )+_sage_const_1 
     numerator = denominator*(ZZ.random_element(_sage_const_15 )+_sage_const_1 )
     negOrNo = "-"
     displayProblem = [numerator**_sage_const_2 , denominator**_sage_const_2 , negOrNo]
     return displayProblem
 
 def generateRational():
     numeratorBefore = ZZ.random_element(_sage_const_15 )+_sage_const_7 
     denominatorBefore = ZZ.random_element(_sage_const_15 )+_sage_const_7 
     negative = ZZ.random_element(_sage_const_2 )
     if negative == _sage_const_0 :
         negOrNo = ""
     else:
         negOrNo = "-"
     counter = _sage_const_0 
     while gcd(numeratorBefore, denominatorBefore) >= min(numeratorBefore, denominatorBefore):
         numerator = ZZ.random_element(_sage_const_15 )+_sage_const_7 
         denominator = ZZ.random_element(_sage_const_15 )+_sage_const_7 
         counter = counter + _sage_const_1 
     numerator = numeratorBefore**_sage_const_2 
     denominator = denominatorBefore**_sage_const_2 
     displayProblem = [numerator, denominator, negOrNo]
     return displayProblem
 
 def generateIrrational():
     numeratorBefore = ZZ.random_element(_sage_const_15 )+_sage_const_1 
     denominatorBefore = ZZ.random_element(_sage_const_15 )+_sage_const_1 
     negative = ZZ.random_element(_sage_const_2 )
     if negative == _sage_const_0 :
         negOrNo = ""
     else:
         negOrNo = "-"
     integerType = type(sqrt(_sage_const_4 ))
     while type(sqrt(numeratorBefore/denominatorBefore)) == integerType:
         numeratorBefore = ZZ.random_element(_sage_const_15 )+_sage_const_1 
         denominatorBefore = ZZ.random_element(_sage_const_15 )+_sage_const_1 
     numerator = numeratorBefore
     denominator = denominatorBefore
     displayProblem = [numerator, denominator, negOrNo]
     return displayProblem
 
 def generateNotReal():
     numeratorBefore = ZZ.random_element(_sage_const_15 )+_sage_const_1 
     denominatorBefore = ZZ.random_element(_sage_const_15 )+_sage_const_1 
     negative = ZZ.random_element(_sage_const_2 )
     if negative == _sage_const_0 :
         negOrNo = ""
     else:
         negOrNo = "-"
     complexOrNotNumber = sample([_sage_const_0 , _sage_const_1 , _sage_const_2 ], _sage_const_1 )[_sage_const_0 ]
     if complexOrNotNumber==_sage_const_0 :
         numerator = -numeratorBefore*pi
         denominator = denominatorBefore
     elif complexOrNotNumber==_sage_const_1 :
         numerator = -numeratorBefore
         denominator = denominatorBefore*pi
     else:
         topOrBottom = ZZ.random_element(_sage_const_2 )
         if topOrBottom==_sage_const_0 :
             numerator = -numeratorBefore
             denominator = _sage_const_0 
         else:
             numerator = -numeratorBefore * pi
             denominator = _sage_const_0 
     displayProblem = [numerator, denominator, negOrNo]
     return displayProblem
 
 def generateDisplay(answer):
     if answer == _sage_const_0 :
         numerator, denominator, negOrNo = generateNatural()
     elif answer == _sage_const_1 :
         numerator, denominator, negOrNo = generateWhole()
     elif answer == _sage_const_2 :
         numerator, denominator, negOrNo = generateInteger()
     elif answer == _sage_const_3 :
         numerator, denominator, negOrNo = generateRational()
     elif answer == _sage_const_4 :
         numerator, denominator, negOrNo = generateIrrational()
     elif answer == _sage_const_5 :
         numerator, denominator, negOrNo = generateNotReal()
     else:
         numerator, denominator, negOrNo = [_sage_const_0 , _sage_const_0 , _sage_const_0 ]
     return [numerator, denominator, negOrNo]
 
 ############ END OF DEFINITIONS ###############
 
 listOptions=[_sage_const_0 , _sage_const_1 , _sage_const_2 , _sage_const_3 , _sage_const_4 , _sage_const_5 ]
 
 ###### QUESTION 1 #########
 answer1 = sample(listOptions, _sage_const_1 )[_sage_const_0 ]
 numerator1, denominator1, negOrNo1 = generateDisplay(answer1)
 
 ###### QUESTION 2 #########
 answer2 = sample(listOptions, _sage_const_1 )[_sage_const_0 ]
 numerator2, denominator2, negOrNo2 = generateDisplay(answer2)
 
 ###### QUESTION 3 #########
 answer3 = sample(listOptions, _sage_const_1 )[_sage_const_0 ]
 numerator3, denominator3, negOrNo3 = generateDisplay(answer3)
 
except:
 _st_.goboom(_sage_const_303 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_308 
 _st_.inline(_sage_const_0 , latex(negOrNo1))
except:
 _st_.goboom(_sage_const_308 )
try:
 _st_.current_tex_line = _sage_const_308 
 _st_.inline(_sage_const_1 , latex(numerator1))
except:
 _st_.goboom(_sage_const_308 )
try:
 _st_.current_tex_line = _sage_const_308 
 _st_.inline(_sage_const_2 , latex(denominator1))
except:
 _st_.goboom(_sage_const_308 )
try:
 _st_.current_tex_line = _sage_const_319 
 _st_.inline(_sage_const_3 , latex(answer1))
except:
 _st_.goboom(_sage_const_319 )
try:
 _st_.current_tex_line = _sage_const_327 
 _st_.inline(_sage_const_4 , latex(negOrNo2))
except:
 _st_.goboom(_sage_const_327 )
try:
 _st_.current_tex_line = _sage_const_327 
 _st_.inline(_sage_const_5 , latex(numerator2))
except:
 _st_.goboom(_sage_const_327 )
try:
 _st_.current_tex_line = _sage_const_327 
 _st_.inline(_sage_const_6 , latex(denominator2))
except:
 _st_.goboom(_sage_const_327 )
try:
 _st_.current_tex_line = _sage_const_338 
 _st_.inline(_sage_const_7 , latex(answer2))
except:
 _st_.goboom(_sage_const_338 )
try:
 _st_.current_tex_line = _sage_const_345 
 _st_.inline(_sage_const_8 , latex(negOrNo3))
except:
 _st_.goboom(_sage_const_345 )
try:
 _st_.current_tex_line = _sage_const_345 
 _st_.inline(_sage_const_9 , latex(numerator3))
except:
 _st_.goboom(_sage_const_345 )
try:
 _st_.current_tex_line = _sage_const_345 
 _st_.inline(_sage_const_10 , latex(denominator3))
except:
 _st_.goboom(_sage_const_345 )
try:
 _st_.current_tex_line = _sage_const_356 
 _st_.inline(_sage_const_11 , latex(answer3))
except:
 _st_.goboom(_sage_const_356 )
_st_.endofdoc()

