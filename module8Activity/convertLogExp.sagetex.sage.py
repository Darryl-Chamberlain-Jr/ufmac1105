## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file convertLogExp.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_40 = Integer(40); _sage_const_9 = Integer(9); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_66 = Integer(66); _sage_const_72 = Integer(72); _sage_const_0 = Integer(0); _sage_const_74 = Integer(74); _sage_const_86 = Integer(86); _sage_const_4 = Integer(4); _sage_const_88 = Integer(88); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_7 = Integer(7); _sage_const_94 = Integer(94); _sage_const_10 = Integer(10); _sage_const_141 = Integer(141); _sage_const_149 = Integer(149); _sage_const_8 = Integer(8); _sage_const_151 = Integer(151); _sage_const_11 = Integer(11); _sage_const_161 = Integer(161); _sage_const_12 = Integer(12); _sage_const_13 = Integer(13); _sage_const_14 = Integer(14); _sage_const_163 = Integer(163); _sage_const_15 = Integer(15); _sage_const_173 = Integer(173); _sage_const_16 = Integer(16); _sage_const_17 = Integer(17); _sage_const_18 = Integer(18); _sage_const_19 = Integer(19); _sage_const_175 = Integer(175); _sage_const_20 = Integer(20); _sage_const_183 = Integer(183); _sage_const_21 = Integer(21); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_24 = Integer(24); _sage_const_185 = Integer(185); _sage_const_25 = Integer(25)## This file (convertLogExp.sagetex.sage) was *autogenerated* from convertLogExp.tex with sagetex.sty version 2019/11/14 v3.4.
import sagetex
_st_ = sagetex.SageTeXProcessor('convertLogExp', version='2019/11/14 v3.4', version_check=True)
_st_.current_tex_line = _sage_const_40 
_st_.blockbegin()
try:
 x = var("x")
 y = var("y")
 
 def createVariables():
     listWholes = ZZ.range(_sage_const_9 )
     uniqueList = Subsets([listWholes[i] + _sage_const_2  for i in range(_sage_const_9 )], _sage_const_3 )
     base, horShift, vertShift = uniqueList.random_element()
     vertShift = (-_sage_const_1 )**ZZ.random_element(_sage_const_2 )
     return [base, horShift, vertShift]
 
 def convertToExpFunction(base, horShift, vertShift, var):
     function = (base)**(var - vertShift) + horShift
     return function
 
 ##### END OF DEFINITIONS #####
 
 ### QUESTION 5 ###
 base5, horShift5, vertShift5 = createVariables()
 logFunction5 = x - horShift5
 answer5 = convertToExpFunction(base5, horShift5, vertShift5, y)
 
 ### QUESTION 6 ###
 base6, horShift6, vertShift6 = createVariables()
 expFunction6 = convertToExpFunction(base6, vertShift6, horShift6, x)
 answerVert6 = y - vertShift6
except:
 _st_.goboom(_sage_const_66 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_72 
 _st_.inline(_sage_const_0 , latex(base5))
except:
 _st_.goboom(_sage_const_72 )
try:
 _st_.current_tex_line = _sage_const_72 
 _st_.inline(_sage_const_1 , latex(logFunction5))
except:
 _st_.goboom(_sage_const_72 )
try:
 _st_.current_tex_line = _sage_const_72 
 _st_.inline(_sage_const_2 , latex(vertShift5))
except:
 _st_.goboom(_sage_const_72 )
try:
 _st_.current_tex_line = _sage_const_74 
 _st_.inline(_sage_const_3 , latex(answer5))
except:
 _st_.goboom(_sage_const_74 )
try:
 _st_.current_tex_line = _sage_const_86 
 _st_.inline(_sage_const_4 , latex(expFunction6))
except:
 _st_.goboom(_sage_const_86 )
try:
 _st_.current_tex_line = _sage_const_88 
 _st_.inline(_sage_const_5 , latex(base6))
except:
 _st_.goboom(_sage_const_88 )
try:
 _st_.current_tex_line = _sage_const_88 
 _st_.inline(_sage_const_6 , latex(answerVert6))
except:
 _st_.goboom(_sage_const_88 )
try:
 _st_.current_tex_line = _sage_const_88 
 _st_.inline(_sage_const_7 , latex(horShift6))
except:
 _st_.goboom(_sage_const_88 )
_st_.current_tex_line = _sage_const_94 
_st_.blockbegin()
try:
 x = var("x")
 
 #Ideas for forms of this question:
 #log(f1*x+f2)/log(b) + k = n1/d1, solve for x
 
 def maybeMakeNegative(natural):
     integer = natural*(-_sage_const_1 )**ZZ.random_element(_sage_const_2 )
     return integer
 def generateEquationAndSolutionEasy():
     f1 = maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     f2 = _sage_const_0 
     displayFactor = f1 * x
     base = ZZ.random_element(_sage_const_2 , _sage_const_5 )
     k = _sage_const_0 
     n1 = ZZ.random_element(_sage_const_3 , _sage_const_10 )
     d1 = _sage_const_1 
     leftHandSide = log(f1*x+f2)/log(base) + k
     rightHandSide = n1/d1
     solution = round(float(solve(leftHandSide == rightHandSide, x)[_sage_const_0 ].rhs()), _sage_const_3 )
     #
     return [displayFactor, base, rightHandSide, solution]
 def generateEquationAndSolutionHard():
     f1 = maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     f2 = maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     displayFactor = f1*x + f2
     base = ZZ.random_element(_sage_const_2 , _sage_const_5 )
     k = ZZ.random_element(_sage_const_3 , _sage_const_10 )
     n1 = maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     d1 = maybeMakeNegative(ZZ.random_element(_sage_const_3 , _sage_const_7 ))
     leftHandSide = log(f1*x+f2)/log(base) + k
     rightHandSide = n1/d1
     solution = round(float(solve(leftHandSide == rightHandSide, x)[_sage_const_0 ].rhs()), _sage_const_3 )
     return [displayFactor, base, k, rightHandSide, solution]
 
 ##### END OF DEFINITIONS ####
 # Question 1 - Easy #
 displayFactor1, base1, rightHandSide1, answer1 = generateEquationAndSolutionEasy()
 
 # Question 2 - Easy #
 displayFactor2, base2, rightHandSide2, answer2 = generateEquationAndSolutionEasy()
 
 # Question 3 - Hard #
 displayFactor3, base3, k3, rightHandSide3, answer3 = generateEquationAndSolutionHard()
 
 # Question 4 - Hard #
 displayFactor4, base4, k4, rightHandSide4, answer4 = generateEquationAndSolutionHard()
except:
 _st_.goboom(_sage_const_141 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_149 
 _st_.inline(_sage_const_8 , latex(base1))
except:
 _st_.goboom(_sage_const_149 )
try:
 _st_.current_tex_line = _sage_const_149 
 _st_.inline(_sage_const_9 , latex(displayFactor1))
except:
 _st_.goboom(_sage_const_149 )
try:
 _st_.current_tex_line = _sage_const_149 
 _st_.inline(_sage_const_10 , latex(rightHandSide1))
except:
 _st_.goboom(_sage_const_149 )
try:
 _st_.current_tex_line = _sage_const_151 
 _st_.inline(_sage_const_11 , latex(answer1))
except:
 _st_.goboom(_sage_const_151 )
try:
 _st_.current_tex_line = _sage_const_161 
 _st_.inline(_sage_const_12 , latex(base2))
except:
 _st_.goboom(_sage_const_161 )
try:
 _st_.current_tex_line = _sage_const_161 
 _st_.inline(_sage_const_13 , latex(displayFactor2))
except:
 _st_.goboom(_sage_const_161 )
try:
 _st_.current_tex_line = _sage_const_161 
 _st_.inline(_sage_const_14 , latex(rightHandSide2))
except:
 _st_.goboom(_sage_const_161 )
try:
 _st_.current_tex_line = _sage_const_163 
 _st_.inline(_sage_const_15 , latex(answer2))
except:
 _st_.goboom(_sage_const_163 )
try:
 _st_.current_tex_line = _sage_const_173 
 _st_.inline(_sage_const_16 , latex(base3))
except:
 _st_.goboom(_sage_const_173 )
try:
 _st_.current_tex_line = _sage_const_173 
 _st_.inline(_sage_const_17 , latex(displayFactor3))
except:
 _st_.goboom(_sage_const_173 )
try:
 _st_.current_tex_line = _sage_const_173 
 _st_.inline(_sage_const_18 , latex(k3))
except:
 _st_.goboom(_sage_const_173 )
try:
 _st_.current_tex_line = _sage_const_173 
 _st_.inline(_sage_const_19 , latex(rightHandSide3))
except:
 _st_.goboom(_sage_const_173 )
try:
 _st_.current_tex_line = _sage_const_175 
 _st_.inline(_sage_const_20 , latex(answer3))
except:
 _st_.goboom(_sage_const_175 )
try:
 _st_.current_tex_line = _sage_const_183 
 _st_.inline(_sage_const_21 , latex(base4))
except:
 _st_.goboom(_sage_const_183 )
try:
 _st_.current_tex_line = _sage_const_183 
 _st_.inline(_sage_const_22 , latex(displayFactor4))
except:
 _st_.goboom(_sage_const_183 )
try:
 _st_.current_tex_line = _sage_const_183 
 _st_.inline(_sage_const_23 , latex(k4))
except:
 _st_.goboom(_sage_const_183 )
try:
 _st_.current_tex_line = _sage_const_183 
 _st_.inline(_sage_const_24 , latex(rightHandSide4))
except:
 _st_.goboom(_sage_const_183 )
try:
 _st_.current_tex_line = _sage_const_185 
 _st_.inline(_sage_const_25 , latex(answer4))
except:
 _st_.goboom(_sage_const_185 )
_st_.endofdoc()

