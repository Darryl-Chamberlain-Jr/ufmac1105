## -*- encoding: utf-8 -*-
## This file (functionInverses.sagetex.sage) was *autogenerated* from functionInverses.tex with sagetex.sty version 2019/11/14 v3.4.
import sagetex
_st_ = sagetex.SageTeXProcessor('functionInverses', version='2019/11/14 v3.4', version_check=True)
_st_.current_tex_line = 36
_st_.blockbegin()
try:
 x = var("x")
 
 def maybeMakeNegative(natural):
     integer = natural*(-1)**ZZ.random_element(2)
     return integer
 
 def generateInverseLinear():
     a = maybeMakeNegative(ZZ.random_element(2, 8))
     b = maybeMakeNegative(ZZ.random_element(2, 8))
     line1 = a * x + b
     line2 = (x - b)/a
     return [line1, line2]
 
 def generateInverseSquareRoot():
     h1 = maybeMakeNegative(ZZ.random_element(2, 8))
     h2 = maybeMakeNegative(ZZ.random_element(2, 8))
     k = maybeMakeNegative(ZZ.random_element(2, 8))
     squareRoot = sqrt(h1*x + h2) + k
     pivot = -h2/h1
     if 0 > (h1*(pivot - 1) + h2):
         domain = [pivot, Infinity]
     else:
         domain = [-Infinity, pivot]
     squareRootInverse = ((x-k)**2 - h2)/h1
     return [squareRoot, squareRootInverse, domain]
 
 def generateSquared():
     h1 = maybeMakeNegative(ZZ.random_element(2, 8))
     h2 = maybeMakeNegative(ZZ.random_element(2, 8))
     k = maybeMakeNegative(ZZ.random_element(2, 8))
     squared = (h1*x + h2)**2 + k
     return squared
 
 def generateInverseCube():
     h1 = maybeMakeNegative(ZZ.random_element(2, 8))
     h2 = maybeMakeNegative(ZZ.random_element(2, 8))
     k = maybeMakeNegative(ZZ.random_element(2, 8))
     cube = (h1*x + h2)**3 + k
     cubeInverse = ((x-k)**(1/3) - h2)/h1
     return [cube, cubeInverse]
 
 def generateInverseCubeRoot():
     h1 = maybeMakeNegative(ZZ.random_element(2, 8))
     h2 = maybeMakeNegative(ZZ.random_element(2, 8))
     k = maybeMakeNegative(ZZ.random_element(2, 8))
     cubeRoot = (h1*x + h2)**(1/3) + k
     cubeRootInverse = ((x-k)**3 - h2)/h1
     return [cubeRoot, cubeRootInverse]
 #########
 f1, f1Inverse = generateInverseCube()
 f2 = generateSquared()
 f3, f3Inverse = generateInverseLinear()
 f4, f4Inverse, domain4 = generateInverseSquareRoot()
 while domain4[0] > -Infinity:
     f4, f4Inverse, domain4 = generateInverseSquareRoot()
 f5, f5Inverse = generateInverseCubeRoot()
except:
 _st_.goboom(93)
_st_.blockend()
try:
 _st_.current_tex_line = 99
 _st_.inline(0, latex(f1))
except:
 _st_.goboom(99)
try:
 _st_.current_tex_line = 103
 _st_.inline(1, latex(f1Inverse))
except:
 _st_.goboom(103)
try:
 _st_.current_tex_line = 116
 _st_.inline(2, latex(f2))
except:
 _st_.goboom(116)
try:
 _st_.current_tex_line = 132
 _st_.inline(3, latex(f3))
except:
 _st_.goboom(132)
try:
 _st_.current_tex_line = 136
 _st_.inline(4, latex(f3Inverse))
except:
 _st_.goboom(136)
try:
 _st_.current_tex_line = 148
 _st_.inline(5, latex(f4))
except:
 _st_.goboom(148)
try:
 _st_.current_tex_line = 152
 _st_.inline(6, latex(f4Inverse))
except:
 _st_.goboom(152)
try:
 _st_.current_tex_line = 164
 _st_.inline(7, latex(f5))
except:
 _st_.goboom(164)
try:
 _st_.current_tex_line = 168
 _st_.inline(8, latex(f5Inverse))
except:
 _st_.goboom(168)
_st_.endofdoc()
